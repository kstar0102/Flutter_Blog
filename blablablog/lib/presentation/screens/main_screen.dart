import 'dart:math';

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'package:get/get.dart';
import 'package:get_storage/get_storage.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:provider/provider.dart' as provider;
import 'package:blabloglucy/Localization/t_keys.dart';
import 'package:blabloglucy/application/auth/auth_provider.dart';
import 'package:blabloglucy/providers/user_provider.dart';
import 'package:blabloglucy/screens/Settings/write_us.dart';
import 'package:blabloglucy/screens/Welcome/welcome_screen.dart';
import 'package:blabloglucy/screens/change/change_screen.dart';
import 'package:blabloglucy/screens/consult/consult_screen.dart';
import 'package:blabloglucy/screens/enddrawer/about_us/about_us_screen.dart';
import 'package:blabloglucy/screens/enddrawer/blocked/blocked_users_screen.dart';
import 'package:blabloglucy/screens/enddrawer/privacy_policy/privacy_policy_screen.dart';
import 'package:blabloglucy/screens/enddrawer/terms_of_use/terms_of_use_screen.dart';
import 'package:blabloglucy/screens/follower/follower.dart';
import 'package:blabloglucy/screens/inboxscreen/user_chats_screen.dart';
import 'package:blabloglucy/screens/karma/karma_screen.dart';
import 'package:blabloglucy/screens/my_screens/my_main_screen.dart';
import 'package:blabloglucy/screens/thoughts/thought_screen.dart';
import 'package:blabloglucy/widgets/custom_user_avatar.dart';

import '../../screens/login_registration/login_prompt_screen.dart';
import '../../screens/medal/medal_screen.dart';
import '../../screens/notifications/notification_screen.dart';
import '../../screens/polls/polls_screen.dart';
import '../../screens/thoughts/controller.dart/autogenerated_background.dart';
import '../../utills/counter_function.dart';

// ignore: must_be_immutable
class MainScreen extends HookConsumerWidget {
  MainScreen({Key? key}) : super(key: key);

  final generateController = Get.put(AutoGenBackground());
  final GlobalKey<ScaffoldState> _scaffoldKey = GlobalKey<ScaffoldState>();
  final box = GetStorage();

  @override
  Widget build(BuildContext context, ref) {
    final state = ref.read(authProvider);
    final controller = useTabController(initialLength: 4);
    SystemChrome.setSystemUIOverlayStyle(
      const SystemUiOverlayStyle(
          statusBarColor: Colors.white, // transparent status bar
          statusBarIconBrightness: Brightness.dark // dark text for status bar
          ),
    );
    // StoryProvider _storyProvider = provider.Provider.of<StoryProvider>(context);
    UserProvider userProvider = provider.Provider.of<UserProvider>(context);
    useEffect(
      () {
        box.write('userColor', state.userInfo.color);
        box.write('userGender', state.userInfo.gender);
        userProvider.getNotifications(
          context: context,
          pageNumber: 0,
        );
        return null;
      },
      [],
    );

    return Stack(
      children: [
        (box.read('isUserLoggedInTheApp') == false ||
                box.read('isUserLoggedInTheApp') == null)
            ? const Scaffold(body: WelcomeScreen())
            : DefaultTabController(
                length: 4,
                initialIndex: controller.index,
                child: Scaffold(
                  key: _scaffoldKey,
                  appBar: AppBar(
                    backgroundColor: Colors.white,
                    elevation: 0,
                    // systemOverlayStyle: SystemUiOverlayStyle(statusBarColor: Colors.orange),
                    bottom: TabBar(
                      controller: controller,
                      onTap: (value) {
                        debugPrint(value.toString());
                        // if(value==1){
                        //   controller.previousIndex;
                        // }
                        // else
                        generateController.generate(value);
                        generateController.update();
                      },

                      isScrollable: true,
                      indicator: const BoxDecoration(),
                      labelStyle: GoogleFonts.montserrat(
                          fontWeight: FontWeight.bold, fontSize: 14),
                      // unselectedLabelStyle: TextStyle(fontFamily: 'Family Name',),
                      unselectedLabelStyle:
                          GoogleFonts.montserrat(fontSize: 14),
                      labelColor: const Color(0xff121556),
                      unselectedLabelColor: const Color(0xff121556),
                      tabs: [
                        Tab(
                          child: Text(TKeys.thoughts_text.translate(context)),
                        ),
                        Tab(
                          child: Text(TKeys.consult_text.translate(context)),
                        ),
                        Tab(
                          text: TKeys.a_change_text.translate(context),
                        ),
                        Tab(
                          text: TKeys.favorites.translate(context),
                        ),
                      ],
                    ),
                    //"assets/icons/logo_text.svg",
                    centerTitle: true,
                    titleSpacing: 0,
                    leadingWidth: 0,
                    title: Container(
                      padding: const EdgeInsets.symmetric(
                          vertical: 5, horizontal: 8),
                      decoration: const ShapeDecoration(
                        shape: StadiumBorder(),
                        color: Color(0xFFF8F9FE),
                      ),
                      child: Row(
                        mainAxisSize: MainAxisSize.min,
                        children: [
                          InkWell(
                            // onTap: () => Navigator.of(context).push(MaterialPageRoute(builder: (builder) => PersonalScreen())),
                            onTap: () {
                              Navigator.of(context).push(
                                MaterialPageRoute(
                                  builder: (builder) => const MyMainScreen(),
                                ),
                              );
                            },
                            child: CustomUserAvatar(
                              size: 32,
                              imageUrl: state.userInfo.gender == 'Male'
                                  ? 'assets/icons/male.png'
                                  : 'assets/icons/female.png',
                              userColor: state.userInfo.color,
                            ),
                          ),
                          const SizedBox(width: 12),
                          InkWell(
                            onTap: () {
                              Navigator.push(
                                context,
                                MaterialPageRoute(
                                  builder: (context) => MedalScreen(),
                                ),
                              );
                            },
                            child: SvgPicture.asset('assets/images/medal.svg'),
                          ),
                          const SizedBox(width: 12),
                          InkWell(
                            onTap: () {
                              Navigator.push(
                                context,
                                MaterialPageRoute(
                                  builder: (context) => PollsScreen(),
                                ),
                              );
                            },
                            child: SvgPicture.asset('assets/images/polls.svg'),
                          ),
                          const SizedBox(width: 12),
                          InkWell(
                            onTap: () {
                              Navigator.push(
                                context,
                                MaterialPageRoute(
                                  builder: (context) => const KarmaScreen(),
                                ),
                              );
                            },
                            child: SvgPicture.asset('assets/images/karma.svg'),
                          ),
                          const SizedBox(width: 12),
                          InkWell(
                            onTap: () {
                              Navigator.push(
                                context,
                                MaterialPageRoute(
                                  builder: (context) =>
                                      const NotificationScreen(),
                                ),
                              );
                            },
                            child: Center(
                              child: Stack(
                                clipBehavior: Clip.none,
                                children: [
                                  SvgPicture.asset(
                                      'assets/icons/notification.svg',
                                      color: const Color(0xFF8B8B8B),
                                      height: 24),
                                  Positioned(
                                    bottom: 3,
                                    right: -2,
                                    child: Container(
                                      decoration: BoxDecoration(
                                        color: userProvider
                                                        .unReadNotificationCount !=
                                                    null &&
                                                userProvider
                                                        .unReadNotificationCount! >
                                                    0
                                            ? Colors.lightGreen
                                            : Colors.transparent,
                                        borderRadius: BorderRadius.circular(20),
                                      ),
                                      height: 15,
                                      width: 15,
                                      child: Center(
                                        child: Text(
                                          userProvider.unReadNotificationCount !=
                                                      null &&
                                                  userProvider
                                                          .unReadNotificationCount! >
                                                      0
                                              ? CounterFunction.countforInt(int
                                                              .parse(userProvider
                                                                  .unReadNotificationCount
                                                                  .toString()))
                                                          .toString() ==
                                                      'null'
                                                  ? '0'
                                                  : CounterFunction.countforInt(
                                                          int.parse(userProvider
                                                              .unReadNotificationCount
                                                              .toString()))
                                                      .toString()
                                              : '',
                                          textAlign: TextAlign.center,
                                          style: const TextStyle(
                                            fontSize: 8,
                                          ),
                                        ),
                                      ),
                                    ),
                                  ),
                                ],
                              ),
                            ),
                          ),
                          const SizedBox(width: 12),
                          InkWell(
                            onTap: () {
                              debugPrint('case 1');
                              if (!_scaffoldKey.currentState!.isDrawerOpen) {
                                _scaffoldKey.currentState!.openDrawer();
                                // _scaffoldKey.currentState!.openEndDrawer();
                              } else {
                                _scaffoldKey.currentState!.openDrawer();
                              }
                            },
                            child:
                                SvgPicture.asset('assets/images/settings.svg'),
                          ),
                        ],
                      ),
                    ),
                  ),
                  body: TabBarView(
                    controller: controller,
                    children: const [
                      // Icon(Icons.directions_car),
                      ThoughtsScreen(),
                      ConsultScreen(),
                      ChangeScreen(),
                      ThoughtsScreen(),
                      // SvgPicture.asset("assets/icons/logo_text.svg", semanticsLabel: 'A red up arrow'),
                    ],
                  ),
                  drawer: CustomDrawer(),

                  // onDrawerChanged: (val) => log("draweropen: $val"),
                  // onEndDrawerChanged: (val) => log("draweropen1: $val"),
                ),
              ),
      ],
    );
  }

  Widget navigationBtn(title, [Function? func]) {
    return ListTile(
      title: Text(
        '$title',
        style: const TextStyle(
          color: Colors.white,
          fontSize: 14,
          fontFamily: 'Montserrat',
        ),
      ),
      onTap: () => func != null ? func() : null,
    );
  }
}

class CustomAboutUsBtn extends StatelessWidget {
  final String? text;
  final dynamic onPressed;
  const CustomAboutUsBtn({
    Key? key,
    this.text,
    this.onPressed,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return TextButton(
      onPressed: onPressed,
      child: Text(
        text!,
        style: const TextStyle(
          color: Colors.white,
          fontSize: 14,
          fontFamily: 'Montserrat',
        ),
      ),
    );
  }
}

class CustomDrawer extends HookConsumerWidget {
  CustomDrawer({Key? key}) : super(key: key);

  final box = GetStorage();

  final List<String> images = [
    'assets/images/PostBackground/1.png',
    'assets/images/PostBackground/2.png',
    'assets/images/PostBackground/3.png',
    'assets/images/PostBackground/4.png',
    'assets/images/PostBackground/5.png',
    'assets/images/PostBackground/6.png',
    'assets/images/PostBackground/7.png',
    'assets/images/PostBackground/8.png',
    'assets/images/PostBackground/9.png',
    'assets/images/PostBackground/10.png',
    'assets/images/PostBackground/11.png',
    'assets/images/PostBackground/12.png',
    'assets/images/PostBackground/13.png',
    'assets/images/PostBackground/14.png',
    'assets/images/PostBackground/15.png',
  ];

  @override
  Widget build(BuildContext context, ref) {
    final state = ref.read(authProvider);
    return Drawer(
      backgroundColor: Colors.white,
      child: Column(
        mainAxisAlignment: MainAxisAlignment.start,
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Container(
            width: double.infinity,
            height: 250,
            padding: const EdgeInsets.all(0),
            child: Stack(
              children: [
                SizedBox(
                  height: 200,
                  child: Image.asset(images[Random().nextInt(15)],
                      fit: BoxFit.cover),
                ),
                Positioned(
                  bottom: 0,
                  left: 20,
                  child: Row(
                    children: [
                      Container(
                        height: 100,
                        width: 100,
                        decoration: BoxDecoration(
                          // color: Colors.red,
                          borderRadius: BorderRadius.circular(100),
                        ),
                        child: CustomUserAvatar(
                          imageUrl: state.userInfo.gender == 'Male'
                              ? 'assets/icons/male.png'
                              : 'assets/icons/female.png',
                          userColor: state.userInfo.color,
                        ),
                      ),
                      const SizedBox(
                        width: 10,
                      ),
                      Container(
                        height: 38,
                        decoration: BoxDecoration(
                            color: Colors.white,
                            borderRadius: BorderRadius.circular(10),
                            boxShadow: const [
                              BoxShadow(
                                  color: Colors.black12,
                                  offset: Offset(1, 1),
                                  spreadRadius: 0.3)
                            ]),
                        child: Center(
                          child: Padding(
                            padding: const EdgeInsets.symmetric(horizontal: 20),
                            child: Text(
                              state.userInfo.name,
                              style: GoogleFonts.montserrat(
                                color: const Color(0xff132952),
                                fontWeight: FontWeight.w500,
                              ),
                            ),
                          ),
                        ),
                      )
                    ],
                  ),
                )
              ],
            ),
          ),
          Container(
            padding: const EdgeInsets.only(top: 8, left: 20),
            color: Colors.white,
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                TextButton(
                    onPressed: () {
                      Navigator.of(context).push(
                        MaterialPageRoute(
                          builder: (builder) => const MyMainScreen(),
                        ),
                      );
                    },
                    child: Text(
                      TKeys.All_i_have_written.translate(context),
                      style: GoogleFonts.montserrat(
                        color: const Color(0xff132952),
                        fontWeight: FontWeight.w500,
                      ),
                    )),
                TextButton(
                    onPressed: () {
                      Navigator.of(context).push(
                        MaterialPageRoute(
                          builder: (builder) => const Follower(),
                        ),
                      );
                    },
                    child: Text(
                      TKeys.Followers_text.translate(context),
                      style: GoogleFonts.montserrat(
                        color: const Color(0xff132952),
                        fontWeight: FontWeight.w500,
                      ),
                    )),

                TextButton(
                    onPressed: () {
                      Navigator.push(
                        context,
                        MaterialPageRoute(
                          builder: (context) => WriteUs(),
                        ),
                      );
                    },
                    child: Text(
                      TKeys.writeus.translate(context),
                      style: GoogleFonts.montserrat(
                        color: const Color(0xff132952),
                        fontWeight: FontWeight.w500,
                      ),
                    )),

                TextButton(
                    onPressed: () {
                      Navigator.push(
                        context,
                        MaterialPageRoute(
                          builder: (context) => const BlockedUsersScreen(),
                        ),
                      );
                    },
                    child: Text(
                      TKeys.Blocked_user.translate(context),
                      style: GoogleFonts.montserrat(
                        color: const Color(0xff132952),
                        fontWeight: FontWeight.w500,
                      ),
                    )),

                TextButton(
                    onPressed: () {
                      Navigator.push(
                        context,
                        MaterialPageRoute(
                          builder: (context) => const PrivacyPolicyScreen(),
                        ),
                      );
                    },
                    child: Text(
                      TKeys.Privacy_policy.translate(context),
                      style: GoogleFonts.montserrat(
                        color: const Color(0xff132952),
                        fontWeight: FontWeight.w500,
                      ),
                    )),
                TextButton(
                    onPressed: () {
                      Navigator.push(
                        context,
                        MaterialPageRoute(
                          builder: (context) => const TermsOfUseScreen(),
                        ),
                      );
                    },
                    child: Text(
                      TKeys.Terms_of.translate(context),
                      style: GoogleFonts.montserrat(
                        color: const Color(0xff132952),
                        fontWeight: FontWeight.w500,
                      ),
                    )),
                TextButton(
                    onPressed: () {
                      Navigator.push(
                        context,
                        MaterialPageRoute(
                          builder: (context) => const AboutUsScreen(),
                        ),
                      );
                    },
                    child: Text(
                      TKeys.About_us_text.translate(context),
                      style: GoogleFonts.montserrat(
                        color: const Color(0xff132952),
                        fontWeight: FontWeight.w500,
                      ),
                    )),

                TextButton(
                    onPressed: () {
                      Navigator.push(
                        context,
                        MaterialPageRoute(
                          builder: (context) => const UserChatsScreen(),
                        ),
                      );
                    },
                    child: Text(
                      TKeys.inbox_text.translate(context),
                      style: GoogleFonts.montserrat(
                        color: const Color(0xff132952),
                        fontWeight: FontWeight.w500,
                      ),
                    )),

                //log out
                TextButton(
                    onPressed: () async {
                      box.write('isUserLoggedInTheApp', false);
                      box.write('userTokenForAuth', '');
                      await ref.read(authProvider.notifier).logout();

                      // ignore: use_build_context_synchronously
                      Navigator.pushAndRemoveUntil(
                        context,
                        MaterialPageRoute(
                          builder: (context) => LoginPromptScreen(),
                        ),
                        (_) => false,
                      );
                    },
                    child: Text(
                      TKeys.Log_Out.translate(context),
                      style: GoogleFonts.montserrat(
                        color: const Color(0xff132952),
                        fontWeight: FontWeight.w500,
                      ),
                    )),
              ],
            ),
          ),
        ],
      ),
    );
  }
}
